## Lotka-Volterra Model 
 
    # dx/dt = αx - βxy
    # dy/dt = δxy - γy

    #Where:

        # x = prey density
        # y = predator density

        # α = prey birth rate coefficent
        # β = coefficent for the effect of the presence of predators on the prey death rate
        # δ = coefficent for the effect of the presence of prey on the predator birth rate
        # γ = predator death rate coefficent

##

# Importing Necessary Packages

using CSV, DataFrames, Distributions, LinearAlgebra, Plots, Random

# Importing Additional Functions and True Model Values

include("fns/functions.jl")         # The functions.jl file contains the RK4, lotka_volterra, log_likelihood, and MCMC functions
include("predator_prey_data.jl")    # The predator_prey_data.jl file is used to get the true model values for the the model comparison plot

# Setting Random Seed for Reproducibility

Random.seed!(54)

# Importing Observed Data

df = CSV.File("data/predator_prey_data.csv") |> DataFrame       # Importing the data from the CSV file generated by predator_prey_data.jl
data = Matrix(df)

# Plotting Raw Data

fig1 = scatter( 

            title = "Observed Predator-Prey Data",
            legend = :outerbottom,
            xlabel = "Time",
            ylabel = "Population Density",
            grid = false

)

scatter!(data[:,1], data[:,2],

    label = "Prey Density",
    color = :red

)

scatter!(data[:,1], data[:,3],

    label = "Predator Density",
    color = :blue

)

savefig(fig1, "figs/raw_data.png")

# Cleaning the Data

sample_points = findall(row -> all(!isnan, row), eachrow(df))       # Finding the indices of the rows that do not contain NaN values

# MCMC Model Initialization

tspan = [0.0, 50.0]             # Timespan for the model simulation
h = 0.01                        # Time step size for the model simulation
p = [3, 3, 0.5, 0.5, 0.5, 0.5]  # Best guess parameter values for the model simulation 
n = 100000                      # Number of samples to generate in the MCMC simulation
σ = 1.0                         # Estimated standard deviation of the noise in the observed data

# Proposal Standard Deviations for the MCMC Simulation

proposal_std = [1.5, 1.5, 0.05, 0.05, 0.05, 0.05]

# Running the MCMC Simulation

chain = MCMC(data[sample_points,2], data[sample_points,3], tspan, h, p, n, σ, proposal_std)

# Plotting the Accepted Posterior Samples

fig2 = plot(
    
        title = "Accepted Posterior Sample Values",
        legend = :outerright,
        xlabel = "Iteration",
        ylabel = "Parameter Value",
        grid = false

)
    
plot!(chain[:, 1],

    label = "x0",
    color = :red

)

plot!(chain[:, 2],

    label = "y0",
    color = :orange

)

plot!(chain[:, 3],

    label = "α",
    color = :yellow

)
plot!(chain[:, 4],

    label = "β",
    color = :green

)
plot!(chain[:, 5],

    label = "δ",
    color = :blue

)
plot!(chain[:, 6],

    label = "γ",
    color = :purple

)

savefig(fig2, "figs/posterior_samples.png")

# Defining Modeled Parameter Values

    # The mean of the posterior samples is used as the best estimate of the parameter values

#

mod_x0 = mean(chain[:, 1])   # Modeled the initial prey density
mod_y0 = mean(chain[:, 2])   # Modeled the initial predator density
mod_α = mean(chain[:, 3])    # Modeled prey birth rate coefficient
mod_β = mean(chain[:, 4])    # Modeled coefficient for the effect of the presence of predators on the prey death rate
mod_δ = mean(chain[:, 5])    # Modeled coefficient for the effect of the presence of prey on the predator birth rate
mod_γ = mean(chain[:, 6])    # Modeled predator death rate coefficient

model_values = [mod_x0, mod_y0, mod_α, mod_β, mod_δ, mod_γ]

# Solving the Lotka-Volterra Equations with the Best Estimate of the Parameter Values

us_mod = RK4(lotka_volterra, [mod_x0, mod_y0], tspan, h, [mod_α, mod_β, mod_δ, mod_γ])
t = tspan[1]:h:tspan[2]
mod_x = [i[1] for i in us_mod] 
mod_y = [i[2] for i in us_mod]

# Plotting the Modeled Curve with the Observed Data

fig3 = plot( 

    title = "Modeled Predator-Prey Dynamics",
    legend = :outerbottom,
    xlabel = "Time",
    ylabel = "Population Density",
    grid = false


)

scatter!(data[:,1], [data[:,2] data[:,3]],

    label = [" Observed Prey Data" "Observed Predator Density"],
    color = [:red :blue]

)
    
plot!(t, [mod_x mod_y],

    label = ["Modeled Prey Density" "Modeled Predator Density"], 
    color = [:red :blue],
    linewidth = 2

)

savefig(fig3, "figs/model_fit.png")

# Plotting Model Comparison to True Values

p1 = plot( 

    title = "Model Comparison for Prey Density",
    titlefontsize = 8,
    legend = :topright,
    legendfontsize = 6,
    ylabel = "Prey Density",
    labelfontsize = 8,
    grid = false


)

plot!(t, mod_x,

    label = "Model",
    color = :red,
    linewidth = 2

)

plot!(t, true_x,

    label = "True",
    color = :black,
    linestyle = :dash,
    linewidth = 2

)

p2 = plot( 

    title = "Model Comparison for Predator Density",
    titlefontsize = 8,
    legend = :topright,
    legendfontsize = 6,
    ylabel = "Predator Density",
    labelfontsize = 8,
    grid = false


)

plot!(t, mod_y,

    label = "Model",
    color = :blue,
    linewidth = 2

)

plot!(t, true_y,

    label = "True",
    color = :black,
    linestyle = :dash,
    linewidth = 2

)

p3 = plot( 

    legend = false,
    xlabel = "Time",
    ylabel = "Prey Density Residuals",
    labelfontsize = 8,
    grid = false


)

hline!([0],

    color = :grey,
    linestyle = :solid,
    linewidth = 1

)

plot!(t, mod_x - true_x,

    ylims = (-1,1),
    color = :red,
    linewidth = 2,
    linestyle = :dot

)

p4 = plot( 

    legend = false,
    xlabel = "Time",
    ylabel = "Predator Density Residuals",
    labelfontsize = 8,
    grid = false


)

hline!([0],

    color = :grey,
    linestyle = :solid,
    linewidth = 1

)

plot!(t, mod_y - true_y,

    ylims = (-1,1),
    color = :blue,
    linewidth = 2,
    linestyle = :dot

)

fig4 = plot(p1, p2, p3, p4, layout = (2, 2))

savefig(fig4, "figs/model_comparison.png")

# End of Script

print("MCMC Simulation Completed! All figures were saved to /figs folder.")